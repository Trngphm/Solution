# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 1, n

        while left < right:
            mid = (left + right) / 2
            if isBadVersion(mid):
                right = mid
            else:
                left = mid + 1
        
        return int(left)

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution2:
    def firstBadVersion(self, n: int) -> int:
        stack = [(1, n)]

        while stack:
            left, right = stack.pop()

            if left >= right:
                return left

            mid = left + (right - left) // 2
            if isBadVersion(mid):
                stack.append((left, mid))
            else:
                stack.append((mid + 1, right))

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution3:
    def firstBadVersion(self, n: int) -> int:
        def binarySearch(left, right):
            if left >= right:
                return left

            mid = left + (right - left) // 2
            if isBadVersion(mid):
                return binarySearch(left, mid)
            else:
                return binarySearch(mid + 1, right)

        return binarySearch(1, n)
