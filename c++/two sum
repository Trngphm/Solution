class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        for (int i = 0; i < nums.size() - 1; i++)
        {
            for (int j = i + 1; j < nums.size(); j++)
            {
                if (nums[i] + nums[j] == target)
                    return {i, j};
            }
        }
        return {};
    };
};

class Solution2 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hash_table;
        for (int i = 0; i < nums.size(); i++)
        {
            int complement = target - nums[i];
            if (hash_table.find(complement) != hash_table.end())
                return {hash_table[complement], i};
            hash_table[nums[i]] = i;
        }
        return {};
    };
};

class Solution3 {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
       unordered_map<int, int> hash_table;

       for (int i = 0; i < nums.size(); i++)
       {
            hash_table[nums[i]] = i;
       } 

       for (int i = 0; i < nums.size(); i++)
       {
            int complement = target - nums[i];
            if (hash_table.find(complement) != hash_table.end() && hash_table[complement] != i)
            {
                return {i, hash_table[complement]};
            }
       }
            
        return {};
    };
};
